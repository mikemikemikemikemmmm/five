{"version":3,"sources":["action.js","chessman.js","checkerboard.js","information.js","init.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["SET_PLAYERNUM","SET_GRIDNUM","INIT_DONE","SET_PLAYERDATA","SET_TURN","setPlayerTurn","data","type","payload","chessman","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allChess","checkVectorList","playerNum","Number","gridNum","gridW","layout","gridWidth","sT","eT","tempRow","tempChess","i","push","concat","setState","rowIndex","gridIndex","Date","getTime","setChessState","_this2","map","row","_rowIndex","grid","_gridIndex","nowPlayerTurn","checkIfWin","_this3","temp","toConsumableArray","_this4","isGameOver","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","vector","value","_loop","linkNum","_vector","item","checkPostion","err","return","gameOver","handlePlayerTurn","_this5","alert","playerData","find","el","id","name","dispatch","console","log","intervalWidth","top","left","height","width","player","backgroundColor","playerInData","color","border","initChess","_this6","react_default","a","createElement","className","key","style","handleChessBtnStyle","onClick","handleMoveChess","objectSpread","borderRadius","handleSingleChessStyle","Component","connect","Checkerboard","_props$layout","totalWidth","renderLayout","isRow","tempList","index","transform","singlePlayer","display","init","isNamePass","isColorPass","isGridPass","checkForm","tempPlayerData","num","length","tempColorList","require","randomColor","count","hue","setPlayerNum","tempData","pop","dataLength","dataLen","min","max","defaultValue","onChange","e","target","disabled","handleChangePlayer","handleChangePlayerName","handleChangeColor","handleInit","isInited","src_chessman_0","checkerboard","information","src_init","initialState","reducer","arguments","action","assign","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46af5ec9.chunk.js","sourcesContent":["\r\nexport const SET_PLAYERNUM = 'SET_PLAYERNUM'\r\nexport const SET_GRIDNUM = 'SET_GRIDNUM'\r\nexport const INIT_DONE = 'INIT_DONE'\r\nexport const SET_PLAYERDATA = 'SET_PLAYERDATA'\r\nexport const SET_TURN = 'SET_TURN'\r\n\r\n\r\n\r\nexport function setPlayerTurn(data) {\r\n    return { type: SET_TURN,payload:data }\r\n}\r\n\r\nexport function setPlayerData(data) {\r\n    return { type: SET_PLAYERDATA,payload:data }\r\n}\r\n\r\nexport function initDone() {\r\n    return { type: INIT_DONE }\r\n}\r\n\r\nexport function setPlayerNum(num) {\r\n    return { type: SET_PLAYERNUM, payload:num }\r\n}\r\n\r\nexport function setGridNum(num) {\r\n    return { type: SET_GRIDNUM, payload:num }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setPlayerTurn } from './action.js'\r\nimport './chessman.scss'\r\nclass chessman extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            allChess: [],\r\n        }\r\n        this.checkVectorList = [\r\n            [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]\r\n        ]\r\n        this.playerNum = Number(this.props.state.playerNum)\r\n        this.gridNum = Number(this.props.state.gridNum)\r\n        this.gridW = this.props.layout.gridWidth\r\n        this.sT =null\r\n        this.eT =null\r\n    }\r\n    initChess() {\r\n        let tempRow = []\r\n        let tempChess = []\r\n        for (let i = 0; i < this.gridNum; i++) {\r\n            tempRow.push(0)\r\n        }\r\n        for (let i = 0; i < this.gridNum; i++) {\r\n            tempChess.push([...tempRow])\r\n        }\r\n        this.setState({ allChess: [...tempChess] })\r\n    }\r\n    handleMoveChess(rowIndex, gridIndex) {\r\n        this.sT = new Date().getTime();\r\n        if (this.state.allChess[rowIndex][gridIndex] !== 0) {\r\n            return\r\n        }\r\n        this.setChessState(rowIndex, gridIndex)\r\n    }\r\n    setChessState(rowIndex, gridIndex) {\r\n        this.setState({\r\n            allChess: this.state.allChess.map((row, _rowIndex) => {\r\n                if (rowIndex === _rowIndex) {\r\n                   return row.map((grid, _gridIndex) => {\r\n                        if (gridIndex === _gridIndex) {\r\n                            return this.props.state.nowPlayerTurn\r\n                        } else {\r\n                            return grid\r\n                        }\r\n                    })\r\n                } else {\r\n                    return row\r\n                }\r\n            })\r\n        }, () => {\r\n            this.checkIfWin(rowIndex, gridIndex)\r\n        })\r\n    }\r\n    setChessState2(rowIndex, gridIndex) {\r\n        let temp = [...this.state.allChess]\r\n        temp[rowIndex][gridIndex] = this.props.state.nowPlayerTurn\r\n        this.setState({allChess:temp}, () => {\r\n            this.checkIfWin(rowIndex, gridIndex)\r\n        })\r\n    }\r\n    checkIfWin(rowIndex, gridIndex) {\r\n        let isGameOver = false\r\n        for (let vector of this.checkVectorList) {\r\n            for (let linkNum = 1; linkNum < 6; linkNum++) {\r\n                if (linkNum === 5) {\r\n                    isGameOver = true\r\n                    break;\r\n                }\r\n                let _vector = vector.map(item => item * linkNum)\r\n                let checkPostion = [rowIndex + _vector[0], gridIndex + _vector[1]]\r\n                if (checkPostion[0] > this.gridNum - 1 || checkPostion[1] > this.gridNum - 1 || checkPostion[0] < 0 || checkPostion[1] < 0) {\r\n                    break\r\n                }\r\n                if (this.state.allChess[checkPostion[0]][checkPostion[1]] !== this.props.state.nowPlayerTurn) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        if (isGameOver) {\r\n            this.gameOver()\r\n        }\r\n        this.handlePlayerTurn()\r\n    }\r\n    gameOver() {\r\n        alert(`${this.props.state.playerData.find(el => el.id === this.props.state.nowPlayerTurn).name}贏了`)\r\n    }\r\n    handlePlayerTurn() {\r\n        if (this.props.state.nowPlayerTurn === this.playerNum) {\r\n            this.props.dispatch(setPlayerTurn(1))\r\n        } else {\r\n            this.props.dispatch(setPlayerTurn(this.props.state.nowPlayerTurn + 1))\r\n        }\r\n        console.log(new Date().getTime()- this.sT)\r\n    }\r\n    handleChessBtnStyle(rowIndex, gridIndex) {\r\n        const { intervalWidth } = this.props.layout\r\n        return ({\r\n            top: rowIndex * intervalWidth + intervalWidth / 2,\r\n            left: gridIndex * intervalWidth + intervalWidth / 2,\r\n            height: this.gridW,\r\n            width: this.gridW\r\n        })\r\n    }\r\n    handleSingleChessStyle(player) {\r\n        if (player !== 0) {\r\n            return ({ backgroundColor: this.props.state.playerData.find(playerInData => player === playerInData.id).color, border: '0.5px black solid' })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.initChess()\r\n    }\r\n    render() {\r\n        const { gridWidth } = this.props.layout\r\n        return (\r\n            <section className='chessman-wrapper' >\r\n                <section className='chess-game'>\r\n                    {this.state.allChess !== [] ?\r\n                        this.state.allChess.map((row, rowIndex) =>\r\n                            <div key={rowIndex} className='chessman-row' style={{ height: gridWidth }}>\r\n                                {row.map((grid, gridIndex) =>\r\n                                    <span\r\n                                        key={gridIndex}\r\n                                        className='chess-btn'\r\n                                        style={this.handleChessBtnStyle(rowIndex, gridIndex)}\r\n                                        onClick={() => this.handleMoveChess(rowIndex, gridIndex)}\r\n                                    >\r\n                                        <div style={{\r\n                                            height: this.gridW * 4 / 5,\r\n                                            width: this.gridW * 4 / 5,\r\n                                            borderRadius: this.gridW * 2 / 5,\r\n                                            ...this.handleSingleChessStyle(grid)\r\n                                        }}\r\n                                            className=\"single-chess\"\r\n                                        ></div>\r\n                                    </span>)\r\n                                }\r\n                            </div>)\r\n                        :\r\n                        null}</section>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return { dispatch }\r\n}\r\nexport default connect(state => { return { state } }, mapDispatchToProps)(chessman)","import React from 'react'\r\nimport './board.scss'\r\nfunction Checkerboard(props) {\r\n  const gridNum = Number(props.gridNum)\r\n  const {gridWidth,intervalWidth} = props.layout\r\n  const totalWidth = (gridNum-1)*gridWidth + gridNum*intervalWidth\r\n  const renderLayout = function (isRow) {\r\n    let tempList = []\r\n    for (let index = 0; index < gridNum ; index++) {\r\n      if (isRow) {\r\n        tempList.push(<div key={`row${index}`} className='single-row'></div>);\r\n      } else {\r\n        tempList.push(<span key={`column${index}`}  className='single-column'></span>);\r\n      }\r\n    }\r\n    return tempList\r\n  }\r\n  return (\r\n    <section className='layout-wrapper' style={{width:totalWidth,height:totalWidth, transform: `translate(${gridWidth/2}px,${gridWidth/2}px)`}}>\r\n      <div className='layout-row'>\r\n        {renderLayout(true)}\r\n      </div>\r\n      <div className='layout-column'>\r\n        {renderLayout(false)}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default Checkerboard;","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nfunction infor(props) {\r\n    const {state} = props\r\n    return (\r\n        <section style={{width:'20%'}}>\r\n            {state.playerData.map(singlePlayer =>\r\n                <div key={singlePlayer.id}>{state.nowPlayerTurn === singlePlayer.id ? <span>>></span> : null}\r\n                    <span>玩家{singlePlayer.id}，{singlePlayer.name}</span>\r\n                    <span style={{ width: 20, height: 20, backgroundColor: singlePlayer.color,display:'inline-block' }}></span>\r\n                </div>\r\n            )}\r\n        </section>\r\n    )\r\n}\r\nexport default connect(state => { return { state } })(infor)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setPlayerNum, setGridNum, initDone, setPlayerData } from './action'\r\nimport { isNumber } from 'util';\r\n\r\nclass init extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            playerData: [{ id: 1, name: '' }, { id: 2, name: '' }],\r\n            color: '',\r\n            gridNum: 5\r\n        }\r\n    }\r\n    checkForm() {\r\n        const isNamePass = this.state.playerData.find(player => player.name === '') === undefined ? true : false\r\n        const isColorPass = this.state.color !== '' ? true : false\r\n        const isGridPass = Number(5 <= this.state.gridNum) && Number(this.state.gridNum <= 30) ? true : false\r\n        if (isColorPass === true && isNamePass === true && isGridPass === true) {\r\n            return true\r\n        } else {\r\n            alert('請確認顏色跟名字都有填上以及格子數在5~30之間')\r\n            return false\r\n        }\r\n    }\r\n    handleInit() {\r\n        if (this.checkForm() === false) {\r\n            return\r\n        }\r\n        let tempPlayerData\r\n        const playerNum = this.state.playerData.length\r\n        if (this.state.color === 'random') {\r\n            const randomColor = require('randomcolor')\r\n            const tempColorList = randomColor({\r\n                count: playerNum,\r\n                hue: 'random'\r\n            });\r\n            tempPlayerData = this.state.playerData.map(player => { return { ...player, color: tempColorList[player.id - 1] } })\r\n        } else {\r\n            tempPlayerData = this.state.playerData.map(player => {\r\n                return ({\r\n                    ...player,\r\n                    color: '#000000'\r\n                })\r\n            })\r\n        }\r\n        this.props.dispatch(setGridNum(this.state.gridNum))\r\n        this.props.dispatch(setPlayerNum(playerNum))\r\n        this.props.dispatch(setPlayerData(tempPlayerData))\r\n        this.props.dispatch(initDone())\r\n    }\r\n    handleChangePlayer(num) {\r\n        let tempData = [...this.state.playerData]\r\n        if (num === -1) {\r\n            tempData.pop()\r\n        } else {\r\n            const dataLength = this.state.playerData.length\r\n            tempData.push({ id: dataLength + 1, name: '' })\r\n        }\r\n        this.setState({ playerData: tempData })\r\n    }\r\n    handleChangePlayerName(name, id) {\r\n        this.setState({\r\n            playerData: [...this.state.playerData].map(player => {\r\n                if (player.id === id) {\r\n                    return { ...player, name: name }\r\n                } else {\r\n                    return player\r\n                }\r\n            })\r\n        })\r\n    }\r\n    handleChangeColor(value) {\r\n        this.setState({ color: value })\r\n    }\r\n    render() {\r\n        const dataLen = this.state.playerData.length\r\n        return (\r\n            <div>\r\n                請選擇邊格數\r\n                <input type=\"number\" min=\"5\" max=\"30\" defaultValue='5' onChange={(e) => this.setState({ gridNum: e.target.value })} />\r\n                請選擇人數\r\n                <button disabled={dataLen <= 2} onClick={() => this.handleChangePlayer(-1)}>-</button>\r\n                {dataLen}\r\n                <button disabled={dataLen >= 8} onClick={() => this.handleChangePlayer(1)}>+</button>\r\n                {this.state.playerData.map(item =>\r\n                    <div key={item.id}>\r\n                        <span>玩家{item.id}</span>\r\n                        <span>請輸入名稱<input type=\"text\" onChange={(e) => this.handleChangePlayerName(e.target.value, item.id)} /></span>\r\n                    </div>\r\n                )}\r\n                顏色分配\r\n                隨機<input type=\"radio\" name=\"color-radio\" onChange={(e) => this.handleChangeColor(e.target.value)} value='random' />\r\n                同色<input type=\"radio\" name=\"color-radio\" onChange={(e) => this.handleChangeColor(e.target.value)} value='allsame' />\r\n                <button onClick={() => this.handleInit()} >開始遊戲</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return { dispatch }\r\n}\r\nexport default connect(state => { return { state } }, mapDispatchToProps)(init)","import React from 'react';\nimport Chessman from './chessman'\nimport Checkerboard from './checkerboard'\nimport { connect } from 'react-redux'\nimport Information from './information.js'\nimport Init from './init'\nimport './app.scss'\nfunction App(props) {\n  let isInited = props.state.isInited\n  const layout = {\n    gridWidth: 20,\n    intervalWidth: 2,\n  }\n  return (\n    <section className=\"App\" >\n      {!isInited ?\n        <section>\n          <Init />\n        </section>\n        :\n        <section style={{display:'flex'}}>\n          <section style={{width:'80%'}}>\n            <Chessman layout={layout} />\n            <Checkerboard gridNum={props.state.gridNum} layout={layout} />\n          </section>\n          <Information />\n        </section>\n      }\n    </section >\n  );\n}\n\nexport default connect(state => { return { state } })(App)","const initialState = {\r\n    playerNum: 2,\r\n    gridNum: 15,\r\n    isInited: false,\r\n    playerData: [],\r\n    nowPlayerTurn: 1\r\n}\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'INIT_DONE':\r\n            return Object.assign({}, state, {\r\n                isInited: true\r\n            })\r\n        case 'SET_PLAYERNUM':\r\n            return Object.assign({}, state, {\r\n                playerNum: action.payload\r\n            })\r\n        case 'SET_GRIDNUM':\r\n            return Object.assign({}, state, {\r\n                gridNum: action.payload\r\n            })\r\n        case 'SET_PLAYERDATA':\r\n            return Object.assign({}, state, {\r\n                playerData: action.payload\r\n            })\r\n        case 'SET_TURN':\r\n            return Object.assign({}, state, {\r\n                nowPlayerTurn: action.payload\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default reducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport reducer from './reducer'\nimport * as serviceWorker from './serviceWorker';\n\nlet store = createStore(reducer)\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}